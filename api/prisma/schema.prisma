// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//  --------------------------------------------------------
model User {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email     String   @unique
  password  String
  firstName String
  lastName  String
  birthDate DateTime @default(now()) @db.Timestamptz()

  createdAt DateTime @default(now()) @db.Timestamptz()
  updatedAt DateTime @updatedAt @db.Timestamptz()

  TeacherProfiles TeacherProfile[]
  StudentProfiles StudentProfile[]
}

// --------------------------------------------------------
model TeacherProfile {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid

  nikname String

  createdAt DateTime @default(now()) @db.Timestamptz()
  updatedAt DateTime @updatedAt @db.Timestamptz()

  User   User   @relation(fields: [userId], references: [id])
  userId String @db.Uuid

  Section   Section[]
  Classroom Classroom[]
  Subject   Subject[]

  @@unique([userId, nikname])
  @@index([userId])
}

// --------------------------------------------------------
model StudentProfile {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid

  nikname String

  createdAt DateTime @default(now()) @db.Timestamptz()
  updatedAt DateTime @updatedAt @db.Timestamptz()

  User   User   @relation(fields: [userId], references: [id])
  userId String @db.Uuid

  SectionSubscriptions SectionSubscription[]

  @@unique([userId, nikname])
  @@index([userId])
}

// --------------------------------------------------------
model Classroom {
  id          String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String  @unique
  description String?

  createdAt DateTime @default(now()) @db.Timestamptz()
  updatedAt DateTime @updatedAt @db.Timestamptz()

  Section Section[]

  teacherProfileId String         @db.Uuid
  TeacherProfile   TeacherProfile @relation(fields: [teacherProfileId], references: [id])

  @@unique([teacherProfileId, name])
  @@index([teacherProfileId])
}

// --------------------------------------------------------
model Subject {
  id          String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String
  description String?

  createdAt DateTime @default(now()) @db.Timestamptz()
  updatedAt DateTime @updatedAt @db.Timestamptz()

  Sections Section[]

  teacherProfileId String         @db.Uuid
  TeacherProfile   TeacherProfile @relation(fields: [teacherProfileId], references: [id])

  @@unique([teacherProfileId, name])
  @@index([name])
}

// --------------------------------------------------------
model Section {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String
  description String?
  startDate   DateTime
  endDate     DateTime

  Subject   Subject @relation(fields: [subjectId], references: [id])
  subjectId String  @db.Uuid

  TeacherProfile TeacherProfile @relation(fields: [teacherId], references: [id])
  teacherId      String         @db.Uuid

  Classroom   Classroom @relation(fields: [classroomId], references: [id])
  classroomId String    @db.Uuid

  SectionSubscriptions SectionSubscription[]
  SectionSchedule      SectionSchedule[]

  @@unique([subjectId, name])
  @@index([teacherId])
}

model SectionSchedule {
  id        String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  sectionId String @db.Uuid

  day Int // 1 - Mon; 7 - Sat

  startTime   Int
  durationMin Int // Duration in minutes

  Section Section @relation(fields: [sectionId], references: [id])

  @@unique([sectionId, startTime, day])
  @@index([sectionId])
}

// --------------------------------------------------------
model SectionSubscription {
  // Todo add invalidation logic (if schedule was updated by teacher)
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid

  Section   Section @relation(fields: [sectionId], references: [id])
  sectionId String  @db.Uuid

  StudentProfile StudentProfile @relation(fields: [studentId], references: [id])
  studentId      String         @db.Uuid

  @@unique([sectionId, studentId])
  @@index(sectionId)
  @@index(studentId)
}
