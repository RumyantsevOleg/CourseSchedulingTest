import puppeteer from 'puppeteer'

const formatTime = (timeInMinutes: number) => {
  const hours = Math.floor(timeInMinutes / 60)
  const minutes = timeInMinutes % 60
  return `${hours}:${minutes < 10 ? '0' + minutes : minutes}`
}

// Todo this is fast solution. We can improve pdf generation architecture (use models etc).
//  We can improve architecture form performance perspective. (Use different types of scaling, microservices, queue etc
//  But for quick solution and MVP we can use this

export async function generatePDF(htmlContent: string) {
  let browser
  try {
    browser = await puppeteer.launch({
      headless: false,
      args: ['--no-sandbox', '--disable-setuid-sandbox'],
    })

    const page = await browser.newPage()

    await page.setContent(htmlContent, { waitUntil: 'load' })

    await page.waitForSelector('body', { visible: true })

    page.on('console', msg => console.log('PAGE LOG:', msg.text()))

    const pdfBuffer = await page.pdf({ format: 'A4', printBackground: true })

    return pdfBuffer
  } catch (error) {
    console.error('Error generating PDF:', error)
    throw error
  } finally {
    if (browser) {
      // await browser.close()
    }
  }
}

// Todo update this type
type IGenerateScheduleHTML = ({
  Section: {
    id: string
    name: string
    description: string | null
    startDate: Date
    endDate: Date
    subjectId: string
    teacherId: string
    classroomId: string
  }
} & { id: string; sectionId: string; day: number; startTime: number; endTime: number; durationMin: number })[]

// Todo this template was generated by AI to save time.
//   After evaluating it, you can come to the conclusion that it is quite mediocre and it is better to rewrite it using template engines, React/Vue or use other architectural approaches. But for simplicity and speed of development this is ignored for now
export const generateScheduleHTML = (scheduleData: IGenerateScheduleHTML) => {
  const daysOfWeek = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']

  let htmlContent = `
    <html>
      <head>
        <style>
          body { font-family: Arial, sans-serif; margin: 20px; }
          h1 { text-align: center; font-size: 24px; }
          table { width: 100%; border-collapse: collapse; margin-top: 20px; }
          th, td { padding: 8px; text-align: left; border: 1px solid #ddd; }
          th { background-color: #f4f4f4; }
          .day-title { font-size: 18px; font-weight: bold; margin-top: 20px; }
        </style>
      </head>
      <body>
        <h1>Student Schedule</h1>
  `

  let currentDay = null

  scheduleData.forEach(item => {
    const dayName = daysOfWeek[item.day - 1]

    if (currentDay !== dayName) {
      if (currentDay !== null) htmlContent += `</tbody></table>`
      htmlContent += `<div class="day-title">${dayName}</div><table>`
      htmlContent += `
        <thead>
          <tr>
            <th>Start Time</th>
            <th>End Time</th>
            <th>Course Name</th>
            <th>Teacher</th>
          </tr>
        </thead>
        <tbody>
      `
      currentDay = dayName
    }

    const startTime = formatTime(item.startTime)
    const endTime = formatTime(item.endTime)

    htmlContent += `
      <tr>
        <td>${startTime}</td>
        <td>${endTime}</td>
        <td>${item.Section.name}</td>
        <td>${item.Section.teacherId}</td>
      </tr>
    `
  })

  htmlContent += `</tbody></table>`

  htmlContent += `</body></html>`

  return htmlContent
}
